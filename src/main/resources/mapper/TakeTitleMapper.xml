<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bishe.main.dao.TakeTitleMapper">
  <resultMap id="BaseResultMap" type="com.bishe.main.entity.TakeTitle">
    <id column="take_id" jdbcType="INTEGER" property="takeId" />
    <result column="user_id" jdbcType="VARCHAR" property="userId" />
    <result column="take_edit_time" jdbcType="TIMESTAMP" property="takeEditTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.bishe.main.entity.TakeTitleWithBLOBs">
    <result column="right_title_id" jdbcType="LONGVARCHAR" property="rightTitleId" />
    <result column="wrong_title_id" jdbcType="LONGVARCHAR" property="wrongTitleId" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    take_id, user_id, take_edit_time
  </sql>
  <sql id="Blob_Column_List">
    right_title_id, wrong_title_id
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.bishe.main.entity.TakeTitleExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tb_take_title
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.bishe.main.entity.TakeTitleExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from tb_take_title
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tb_take_title
    where take_id = #{takeId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from tb_take_title
    where take_id = #{takeId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.bishe.main.entity.TakeTitleWithBLOBs">
    insert into tb_take_title (take_id, user_id, take_edit_time, 
      right_title_id, wrong_title_id)
    values (#{takeId,jdbcType=INTEGER}, #{userId,jdbcType=VARCHAR}, #{takeEditTime,jdbcType=TIMESTAMP}, 
      #{rightTitleId,jdbcType=LONGVARCHAR}, #{wrongTitleId,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.bishe.main.entity.TakeTitleWithBLOBs">
    insert into tb_take_title
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="takeId != null">
        take_id,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="takeEditTime != null">
        take_edit_time,
      </if>
      <if test="rightTitleId != null">
        right_title_id,
      </if>
      <if test="wrongTitleId != null">
        wrong_title_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="takeId != null">
        #{takeId,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="takeEditTime != null">
        #{takeEditTime,jdbcType=TIMESTAMP},
      </if>
      <if test="rightTitleId != null">
        #{rightTitleId,jdbcType=LONGVARCHAR},
      </if>
      <if test="wrongTitleId != null">
        #{wrongTitleId,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.bishe.main.entity.TakeTitleWithBLOBs">
    update tb_take_title
    <set>
      <if test="userId != null">
        user_id = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="takeEditTime != null">
        take_edit_time = #{takeEditTime,jdbcType=TIMESTAMP},
      </if>
      <if test="rightTitleId != null">
        right_title_id = #{rightTitleId,jdbcType=LONGVARCHAR},
      </if>
      <if test="wrongTitleId != null">
        wrong_title_id = #{wrongTitleId,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where take_id = #{takeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.bishe.main.entity.TakeTitleWithBLOBs">
    update tb_take_title
    set user_id = #{userId,jdbcType=VARCHAR},
      take_edit_time = #{takeEditTime,jdbcType=TIMESTAMP},
      right_title_id = #{rightTitleId,jdbcType=LONGVARCHAR},
      wrong_title_id = #{wrongTitleId,jdbcType=LONGVARCHAR}
    where take_id = #{takeId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.bishe.main.entity.TakeTitle">
    update tb_take_title
    set user_id = #{userId,jdbcType=VARCHAR},
      take_edit_time = #{takeEditTime,jdbcType=TIMESTAMP}
    where take_id = #{takeId,jdbcType=INTEGER}
  </update>
</mapper>